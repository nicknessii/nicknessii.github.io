<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nick的博客</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Nick的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 20 Aug 2017 21:38:52 +0800</lastBuildDate>
    
        <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      
        <description>&lt;p&gt;Hugo is a static site engine written in Go.&lt;/p&gt;
&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/jWalterWeatherman&#34;&gt;J Walter Weatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cast&#34;&gt;Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>关于Maven与包管理</title>
      <link>http://localhost:1313/post/%E5%85%B3%E4%BA%8Emaven%E4%B8%8E%E5%8C%85%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sun, 01 Mar 2020 15:27:56 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%85%B3%E4%BA%8Emaven%E4%B8%8E%E5%8C%85%E7%AE%A1%E7%90%86/</guid>
      
        <description>&lt;h1 id=&#34;jvm的工作&#34;&gt;JVM的工作&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;执行一个类的字节码&lt;/li&gt;
&lt;li&gt;假如这个过程中碰到了新的类,则加载新类的字节码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;包的概念&#34;&gt;包的概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;为了更好地组织类,Java提供了包机制&lt;/li&gt;
&lt;li&gt;包就是把许多类放在一起打成的压缩包&lt;/li&gt;
&lt;li&gt;包是类的容器,用于分隔类名空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;类路径classpath&#34;&gt;类路径Classpath&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;-classpath或-cp&lt;/li&gt;
&lt;li&gt;JVM通过类路径找到需要加载的类&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;classpath-hell&#34;&gt;Classpath hell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;类的全限定类名(目录层级)唯一确定了一个类&lt;/li&gt;
&lt;li&gt;当多个同名类同时出现在Classpath中,就可能出现很麻烦的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;包管理&#34;&gt;包管理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;包管理的本质就是告诉JVM如何找到所需的第三方类库以及解决其中的冲突问题&lt;/li&gt;
&lt;li&gt;用java开发的传统的项目因为包的管理有很多问题,所以才有的maven的诞生&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;maven&#34;&gt;Maven&lt;/h1&gt;
&lt;p&gt;Maven是一个里程碑式的包管理工具,又远远不止是包管理工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Maven的中央仓库
按照一定的约定存储包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maven的本地仓库
默认位于~/.m2
下载的第三⽅方包放在这⾥里里进⾏行行缓存&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maven的包
按照约定为所有的包编号，方便便检索(三个属性groupId/artifactId/version)
扩展-语义化版本&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;包冲突&#34;&gt;包冲突&lt;/h1&gt;
&lt;h2 id=&#34;maven包管理原则&#34;&gt;Maven包管理原则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不允许最终的classpath出现同名不不同版本的jar包&lt;/li&gt;
&lt;li&gt;出现同名包则保留路径层数最短的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常见的包冲突报错&#34;&gt;常见的包冲突报错&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AbstractMethodError&lt;/li&gt;
&lt;li&gt;NoClassDefFoundError&lt;/li&gt;
&lt;li&gt;ClassNotFoundException&lt;/li&gt;
&lt;li&gt;LinkageError&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;依赖分析&#34;&gt;依赖分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IDEA中Maven→dependencies&lt;/li&gt;
&lt;li&gt;IDEA中Maven Helper插件&lt;/li&gt;
&lt;li&gt;命令行mvn dependency: tree展示Maven自动解决冲突之后的依赖树&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;修改pomxml手动解决包冲突&#34;&gt;修改pom.xml手动解决包冲突&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;根据距离最近优先原则，添加一个依赖,使距离远的同名包不被引用&lt;/li&gt;
&lt;li&gt;添加exclusions排除不要的包&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;maven中的scope&#34;&gt;Maven中的scope&lt;/h2&gt;
&lt;p&gt;scope在maven的依赖管理中主要负责项目的部署&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;test&lt;/code&gt; 只在测试代码中生效&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compile&lt;/code&gt;在测试和生产环境中都生效&lt;/li&gt;
&lt;li&gt;&lt;code&gt;provided&lt;/code&gt; 在编译的时候生效，在运行时不生效&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他概念&#34;&gt;其他概念&lt;/h2&gt;
&lt;h3 id=&#34;坐标和依赖&#34;&gt;坐标和依赖&lt;/h3&gt;
&lt;p&gt;Maven坐标为各种构件引入了秩序，任何一个构件都必须明确定义自己的坐标，而一组Maven坐标通过一些元素定义的。如：groupId，artifactId，version,packaging,classifier等&lt;/p&gt;
&lt;h3 id=&#34;仓库&#34;&gt;仓库&lt;/h3&gt;
&lt;p&gt;仓库可以理解为一个用来存储文本和数据的数据存储应用程序&lt;/p&gt;
&lt;h3 id=&#34;生命周期&#34;&gt;生命周期&lt;/h3&gt;
&lt;p&gt;类从被加载到虚拟机内存中开始， 到卸载出内存为止， 是它的整个生命周期&lt;/p&gt;
&lt;h3 id=&#34;聚合和继承&#34;&gt;聚合和继承&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;聚合是关联关系的一种特例，他体现的是整体与部分、拥有的关系，即has-a的关系&lt;/li&gt;
&lt;li&gt;组合也是关联关系的一种特例，他体现的是一种contains-a的关系&lt;/li&gt;
&lt;li&gt;对于类来说，这种关系叫做继承，对于接口来说，这种关系叫做实现。继承是一种“is-a”关系&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>开播大吉</title>
      <link>http://localhost:1313/post/%E5%BC%80%E6%92%AD%E5%A4%A7%E5%90%89/</link>
      <pubDate>Sun, 23 Feb 2020 18:50:15 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%BC%80%E6%92%AD%E5%A4%A7%E5%90%89/</guid>
      
        <description>&lt;p&gt;#大家好&lt;/p&gt;
&lt;p&gt;我的博客开通了，希望我能写出很好的文章&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>第二篇博客</title>
      <link>http://localhost:1313/post/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sun, 23 Feb 2020 18:50:15 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      
        <description>&lt;h1 id=&#34;又见面了这是第二篇博客&#34;&gt;又见面了，这是第二篇博客&lt;/h1&gt;
&lt;p&gt;本文主要介绍如何用 hugo 搭建个人博客&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载hugo，解压后添加到 Windows 的系统环境变量的 PATH 中即可，不需安装。&lt;/li&gt;
&lt;li&gt;创建一个博客新站点使用命令：hogo new site blog （其中blog为你的站点名字），创建完成即生成你的博客目录，配置你的 config.toml 。&lt;/li&gt;
&lt;li&gt;在Hugo的 主题网站 中挑选一款你喜欢的主题，克隆到 themes 目录下。&lt;/li&gt;
&lt;li&gt;创建第一篇文章，放到 post 目录，方便之后生成聚合页面。其中draft 表示是否是草稿文件，编辑完成后请将其改为 false，否则编译会跳过草稿文件。&lt;/li&gt;
&lt;li&gt;在项目根目录下，通过 hugo server 命令可以使用 hugo 内置服务器调试预览博客。然后在浏览器里打开： http://localhost:1313 即可访问到你的博客。&lt;/li&gt;
&lt;li&gt;如果你需要部署在 GitHub Pages 上，首先在GitHub上创建一个Repository，命名为：xxx.github.io （xxx替换为你的github用户名的小写）。&lt;/li&gt;
&lt;li&gt;可看到根目录下多出 /public文件夹出来，该文件夹的内容即Hugo生成的整个静态网站。然后继续在你的站点根目录执行git 命令，添加远程仓库。&lt;/li&gt;
&lt;li&gt;然后浏览器里访问：https://xxx.github.io/ 即可看到刚刚搭建的博客。&lt;/li&gt;
&lt;li&gt;发布博客。&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
  </channel>
</rss>
